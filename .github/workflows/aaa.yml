name: Workflow réutilisé

on:
  workflow_dispatch:

  workflow_call: # Déclencheur : lorsque le workflow est appelé part un autre workflow
    # Définit les outputs du workflow, en les mappant avec les outputs du job job1
    outputs:
      variable1:
        description: "Premier output"
        value: ${{ jobs.job1.outputs.sortie1 }}
      variable2:
        description: "Deuxième output"
        value: ${{ jobs.job1.outputs.sortie2 }}

jobs:
  job1:
    name: Génère les paramètres de sortie
    runs-on: ubuntu-latest
    outputs: # Définit les outputs du job job1, en les mappant avec les outputs des steps etape1 et etape2
      sortie1: ${{ steps.etape1.outputs.var1 }}
      sortie2: ${{ steps.etape2.outputs.var2 }}
    steps:
      - id: etape1
        name: "Set var1"
        # On récupère la sortie dans GITHUB_OUTPUT pour pouvoir la réutiliser par la suite
        # GITHUB_OUTPUT est un fichier d'environnement partagé entre tous les steps d'un job
        run: echo "var1=Hello" >> $GITHUB_OUTPUT 
      - id: etape2
        name: "Set var2"
        run: echo "var2=world!" >> $GITHUB_OUTPUT
      - id: etape3
        name: "echo var1 var2"
        # On voit que les paramètres de etape1 et etape2 ont bien été récupérés dans etape3
        run: echo ${{ steps.etape1.outputs.var1 }} ${{ steps.etape2.outputs.var2 }}
  job2:
    name: Récupère les paramètres de job1
    runs-on: ubuntu-latest
    needs: job1
    steps:
        - name: "echo var1 var2"
          # On voit que les paramètres de job1 ont bien été récupérés dans job2
          run: echo ${{ needs.job1.outputs.var1 }} ${{ needs.job1.outputs.var2 }}
